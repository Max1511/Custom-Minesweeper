<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();
for (i=1; i&lt;=W; ++i)
    for (j=1; j&lt;=H; ++j)
        area[i, j] = 'c';

attempts = A;
flags = 0;

cells_queue = ds_queue_create();

size_x = min(24, W);
size_y = min(24, H);
move_x = 0;
move_y = 0;

first_click = false;
victory = false;
game_over = false;

alpha = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check_released(vk_escape))
    alpha = 1;
else
{
    if (alpha == 0)
        room_goto(menu);
    alpha -= 0.05;
    alarm[0] = 1;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cell_x = mouse_x div 64 + 1 + move_x;
cell_y = mouse_y div 64 + 1 + move_y;
if (!victory and !game_over and cell_x &lt;= move_x+size_x and move_y+size_y &lt;= H)
{
    if (mouse_check_button_released(mb_left))
    {
        if (!first_click)
        {
            for (i=1; i&lt;=M; ++i)
            {
                wrand = irandom_range(1, W);
                hrand = irandom_range(1, H);
                if (area[wrand, hrand] == 'c' and !(cell_x == wrand and cell_y == hrand))
                    area[wrand, hrand] = 'm';
                else i--;
            }
            first_click = true;
        }
        ds_queue_enqueue(cells_queue, cell_x, cell_y)
        while (!ds_queue_empty(cells_queue))
        {
            open_cell_x = ds_queue_dequeue(cells_queue);
            open_cell_y = ds_queue_dequeue(cells_queue);
            open_cell(open_cell_x, open_cell_y);   
        }
        
        check_victory();
    }
    
    if (mouse_check_button_released(mb_right))
    {
        mark_cell(cell_x, cell_y);
        
        check_victory();
    }
    if (mouse_check_button_released(mb_middle))
    {
        check_nearest_cells(cell_x, cell_y);
        
        check_victory();
    }
}

if (keyboard_check(vk_up) or keyboard_check(ord('W')))
{
    if (move_y &gt; 0) move_y--;
}
if (keyboard_check(vk_down) or keyboard_check(ord('S')))
{
    if (move_y+size_y &lt; H) move_y++;
}
if (keyboard_check(vk_left) or keyboard_check(ord('A')))
{
    if (move_x &gt; 0) move_x--;
}
if (keyboard_check(vk_right) or keyboard_check(ord('D')))
{
    if (move_x+size_x &lt; W) move_x++;
}
if (keyboard_check_pressed(vk_escape) and alpha==1)
        alarm[0]=1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>fullscreen</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(alpha);

for (i=1+move_x; i&lt;=move_x+size_x; ++i)
    for (j=1+move_y; j&lt;=move_y+size_y; ++j)
    {
        x_cell = (i-1-move_x)*64;
        y_cell = (j-1-move_y)*64;
        
        if (area[i, j] == 'c' or area[i, j] == 'm')
            if (mouse_x &gt; x_cell and mouse_x &lt; x_cell+64 and mouse_y &gt; y_cell and mouse_y &lt; y_cell+64)
                if (mouse_check_button(mb_left) or mouse_check_button(mb_right))
                    draw_sprite(spr_cell_dark, 0, x_cell, y_cell);
                else
                    draw_sprite(spr_cell_bright, 0, x_cell, y_cell);
            else
                draw_sprite(spr_cell, 0, x_cell, y_cell);

        if (area[i, j] == 'f' or area[i, j] == 'fm')
            if (mouse_x &gt; x_cell and mouse_x &lt; x_cell+64 and mouse_y &gt; y_cell and mouse_y &lt; y_cell+64)
                if (mouse_check_button(mb_left) or mouse_check_button(mb_right))
                    draw_sprite(spr_flag_dark, 0, x_cell, y_cell);
                else
                    draw_sprite(spr_flag_bright, 0, x_cell, y_cell);
            else
                draw_sprite(spr_flag, 0, x_cell, y_cell);

        if (area[i, j] == '0')
            draw_sprite(spr_empty, 0, x_cell, y_cell);
        if (area[i, j] == '1')
            draw_sprite(spr_1, 0, x_cell, y_cell);
        if (area[i, j] == '2')
            draw_sprite(spr_2, 0, x_cell, y_cell);
        if (area[i, j] == '3')
            draw_sprite(spr_3, 0, x_cell, y_cell);
        if (area[i, j] == '4')
            draw_sprite(spr_4, 0, x_cell, y_cell);
        if (area[i, j] == '5')
           draw_sprite(spr_5, 0, x_cell, y_cell);
        if (area[i, j] == '6')
           draw_sprite(spr_6, 0, x_cell, y_cell);
        if (area[i, j] == '7')
           draw_sprite(spr_7, 0, x_cell, y_cell);
        if (area[i, j] == '8')
            draw_sprite(spr_8, 0, x_cell, y_cell);
        if (area[i, j] == 'mine')
           draw_sprite(spr_mine, 0, x_cell, y_cell);
        if (area[i, j] == 'other')
            draw_sprite(spr_mine_other, 0, x_cell, y_cell);
        if (area[i, j] == 'mistake')
            draw_sprite(spr_mistake, 0, x_cell, y_cell);
    }

if (!victory and !game_over and cell_x &lt;= move_x+size_x and cell_y &lt;= move_y+size_y)
{
    if (mouse_check_button(mb_middle))
    {
        if (area[cell_x, cell_y] &gt;= '1' and area[cell_x, cell_y] &lt;= '8')
        {
            x_draw = (cell_x-1-move_x)*64;
            y_draw = (cell_y-1-move_y)*64;
            if (cell_x+1 &lt;= W)
                if (area[cell_x+1, cell_y] == 'c' or area[cell_x+1, cell_y] == 'm')
                    draw_sprite(spr_cell_dark, 0, x_draw+64, y_draw);
            if (cell_x+1 &lt;= W and cell_y+1 &lt;= H)
                if (area[cell_x+1, cell_y+1] == 'c' or area[cell_x+1, cell_y+1] == 'm')
                    draw_sprite(spr_cell_dark, 0, x_draw+64, y_draw+64);
            if (cell_x+1 &lt;= W and cell_y-1 &gt; 0)
                if (area[cell_x+1, cell_y-1] == 'c' or area[cell_x+1, cell_y-1] == 'm')
                    draw_sprite(spr_cell_dark, 0, x_draw+64, y_draw-64);
            if (cell_y+1 &lt;= H)
                if (area[cell_x, cell_y+1] == 'c' or area[cell_x, cell_y+1] == 'm')
                   draw_sprite(spr_cell_dark, 0, x_draw, y_draw+64);
            if (cell_x-1 &gt; 0)
                if (area[cell_x-1, cell_y] == 'c' or area[cell_x-1, cell_y] == 'm')
                    draw_sprite(spr_cell_dark, 0, x_draw-64, y_draw);
            if (cell_x-1 &gt; 0 and cell_y+1 &lt;= H)
                if (area[cell_x-1, cell_y+1] == 'c' or area[cell_x-1, cell_y+1] == 'm')
                   draw_sprite(spr_cell_dark, 0, x_draw-64, y_draw+64);
            if (cell_x-1 &gt; 0 and cell_y-1 &gt; 0)
                if (area[cell_x-1, cell_y-1] == 'c' or area[cell_x-1, cell_y-1] == 'm')
                    draw_sprite(spr_cell_dark, 0, x_draw-64, y_draw-64);
            if (cell_y-1 &gt; 0)
                if (area[cell_x, cell_y-1] == 'c' or area[cell_x, cell_y-1] == 'm')
                    draw_sprite(spr_cell_dark, 0, x_draw, y_draw-64);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_background(bg_status_list, 24*64, 0);

draw_set_halign(fa_left);
draw_set_font(game_font);
draw_set_colour(c_black);
draw_text(24*64 + 32, 120, "Width: "+string(W));
draw_text(24*64 + 32, 200, "Height: "+string(H));
draw_text(24*64 + 32, 280, "Mines: "+string(M));
draw_text(24*64 + 32, 360, "Attempts: "+string(attempts));
draw_text(24*64 + 32, 440, "Flags: "+string(flags));
draw_set_colour(c_lime);
if (victory) draw_text(24*64 + 32, 520, "Victory!");
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
